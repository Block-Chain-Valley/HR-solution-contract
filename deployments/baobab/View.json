{
  "address": "0x19Ed8b73431208cb7ba5749C8596b469B6861C7f",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getAllVoteStatus",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "voteAddr",
              "type": "address"
            },
            {
              "internalType": "enum IVote.State",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "totalAudience",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "approvedAudience",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardPresenter",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardAudience",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "memberList",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "presenter",
              "type": "address"
            }
          ],
          "internalType": "struct IView.VoteStatus[]",
          "name": "allVoteStatus",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAttendanceAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        }
      ],
      "name": "getAttendanceStatus",
      "outputs": [
        {
          "internalType": "string",
          "name": "attendance",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBVTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        }
      ],
      "name": "getVoteAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "voteContractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVoteFactoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voteAddr",
          "type": "address"
        }
      ],
      "name": "getVoteStatusWithAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "voteAddr",
              "type": "address"
            },
            {
              "internalType": "enum IVote.State",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "totalAudience",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "approvedAudience",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardPresenter",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardAudience",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "memberList",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "presenter",
              "type": "address"
            }
          ],
          "internalType": "struct IView.VoteStatus",
          "name": "voteStatus",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "attendanceAddress",
          "type": "address"
        }
      ],
      "name": "setAttendanceAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bvTokenAddress",
          "type": "address"
        }
      ],
      "name": "setBVTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voteFactoryAddress",
          "type": "address"
        }
      ],
      "name": "setVoteFactoryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdc907ecf6e4e1d765a3be795611667187290246a39fa2f2b4a02eb92090470ae",
  "receipt": {
    "to": null,
    "from": "0xe04E2dB8cf3B429c2cD11D558fAEbd2f0f005d24",
    "contractAddress": "0x19Ed8b73431208cb7ba5749C8596b469B6861C7f",
    "transactionIndex": 0,
    "gasUsed": "1263359",
    "logsBloom": "0x
    "blockHash": "0xd23f2090335bab7c5073be123bb8b25ff1d8ea972b1a09fd0af3b77d155f9512",
    "transactionHash": "0xdc907ecf6e4e1d765a3be795611667187290246a39fa2f2b4a02eb92090470ae",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 104956899,
        "transactionHash": "0xdc907ecf6e4e1d765a3be795611667187290246a39fa2f2b4a02eb92090470ae",
        "address": "0x19Ed8b73431208cb7ba5749C8596b469B6861C7f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e04e2db8cf3b429c2cd11d558faebd2f0f005d24"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd23f2090335bab7c5073be123bb8b25ff1d8ea972b1a09fd0af3b77d155f9512"
      }
    ],
    "blockNumber": 104956899,
    "cumulativeGasUsed": "1263359",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a4b46482ce745bba23d72a57e1401a9b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getAllVoteStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"voteAddr\",\"type\":\"address\"},{\"internalType\":\"enum IVote.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalAudience\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"approvedAudience\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPresenter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAudience\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"memberList\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"presenter\",\"type\":\"address\"}],\"internalType\":\"struct IView.VoteStatus[]\",\"name\":\"allVoteStatus\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAttendanceAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"getAttendanceStatus\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"attendance\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBVTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"getVoteAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"voteContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoteFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voteAddr\",\"type\":\"address\"}],\"name\":\"getVoteStatusWithAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"voteAddr\",\"type\":\"address\"},{\"internalType\":\"enum IVote.State\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalAudience\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"approvedAudience\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPresenter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAudience\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"memberList\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"presenter\",\"type\":\"address\"}],\"internalType\":\"struct IView.VoteStatus\",\"name\":\"voteStatus\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attendanceAddress\",\"type\":\"address\"}],\"name\":\"setAttendanceAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bvTokenAddress\",\"type\":\"address\"}],\"name\":\"setBVTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voteFactoryAddress\",\"type\":\"address\"}],\"name\":\"setVoteFactoryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/View.sol\":\"View\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/View.sol\":{\"content\":\"pragma solidity ^0.8.15;\\n\\nimport \\\"./interface/IView.sol\\\";\\nimport \\\"./interface/IAttendance.sol\\\";\\nimport \\\"./interface/IBVToken.sol\\\";\\nimport \\\"./interface/IVoteFactory.sol\\\";\\nimport \\\"./interface/IVote.sol\\\";\\nimport \\\"./interface/IAttendance.sol\\\";\\nimport \\\"./common/Ownable.sol\\\";\\n\\ncontract View is Ownable, IView {\\n    address private _attendanceAddress;\\n    address private _bvTokenAddress;\\n    address private _voteFactoryAddress;\\n\\n    function getVoteAddress(uint256 date) public returns (address voteContractAddress) {\\n        return IVoteFactory(_voteFactoryAddress).getVoteAddress(date);\\n    }\\n\\n    function getAttendanceAddress() public returns (address) {\\n        return _attendanceAddress;\\n    }\\n\\n    function getBVTokenAddress() public returns (address) {\\n        return _bvTokenAddress;\\n    }\\n\\n    function getVoteFactoryAddress() public returns (address) {\\n        return _voteFactoryAddress;\\n    }\\n\\n    function setAttendanceAddress(address attendanceAddress) public onlyOwner {\\n        _attendanceAddress = attendanceAddress;\\n    }\\n\\n    function setBVTokenAddress(address bvTokenAddress) public onlyOwner {\\n        _bvTokenAddress = bvTokenAddress;\\n    }\\n\\n    function setVoteFactoryAddress(address voteFactoryAddress) public onlyOwner {\\n        _voteFactoryAddress = voteFactoryAddress;\\n    }\\n\\n    // Attendance.sol\\n    function getAttendanceStatus(address user, uint256 date) external returns (string memory attendance) {\\n        attendance = IAttendance(_attendanceAddress).getAttendance(user, date);\\n    }\\n\\n    // IVoteFactory.sol\\n    function getAllVoteStatus() external returns (VoteStatus[] memory allVoteStatus) {\\n        uint256 voteNum = IVoteFactory(_voteFactoryAddress).allVotesLength();\\n        allVoteStatus = new VoteStatus[](voteNum);\\n\\n        for (uint256 i = 0; i < voteNum; i++) {\\n            address _voteAddr = IVoteFactory(_voteFactoryAddress).allVotes(i);\\n            IVote.VoteState memory vote = IVote(_voteAddr).getVote();\\n            allVoteStatus[i].voteAddr = _voteAddr;\\n            allVoteStatus[i].state = vote._state;\\n            allVoteStatus[i].totalAudience = vote._totalAudience;\\n            allVoteStatus[i].approvedAudience = vote._approvedAudience;\\n            allVoteStatus[i].startTime = vote._startTime;\\n            allVoteStatus[i].endTime = vote._endTime;\\n            allVoteStatus[i].rewardPresenter = vote._rewardPresenter;\\n            allVoteStatus[i].rewardAudience = vote._rewardAudience;\\n            allVoteStatus[i].memberList = vote._memberList;\\n            allVoteStatus[i].presenter = vote._presenter;\\n        }\\n    }\\n\\n    function getVoteStatusWithAddress(address _voteAddr) external returns (VoteStatus memory voteStatus) {\\n        IVote.VoteState memory vote = IVote(_voteAddr).getVote();\\n        voteStatus.voteAddr = _voteAddr;\\n        voteStatus.state = vote._state;\\n        voteStatus.totalAudience = vote._totalAudience;\\n        voteStatus.approvedAudience = vote._approvedAudience;\\n        voteStatus.startTime = vote._startTime;\\n        voteStatus.endTime = vote._endTime;\\n        voteStatus.rewardPresenter = vote._rewardPresenter;\\n        voteStatus.rewardAudience = vote._rewardAudience;\\n        voteStatus.memberList = vote._memberList;\\n        voteStatus.presenter = vote._presenter;\\n    }\\n}\\n\",\"keccak256\":\"0xe68b06142dc2662a5bbfb2e0f824560d8561f7890d5ee7e5b95b66249a5e8191\"},\"src/common/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/common/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x0bfcd2b00e05cfb5ca3783eea8f5098bbb015fefba6c4fc8f044743f035b74fe\",\"license\":\"MIT\"},\"src/interface/IAttendance.sol\":{\"content\":\"pragma solidity ^0.8.15;\\n\\ninterface IAttendance {\\n    function getAttendance(address member, uint256 date) external view returns (string memory attendance);\\n\\n    function setAttendance(\\n        address member,\\n        string memory state,\\n        uint256 date\\n    ) external;\\n}\\n\",\"keccak256\":\"0x528c7f68b23a5684c82841a31a7b39b6116697722c25618a8ea629d00d09ad0d\"},\"src/interface/IBVToken.sol\":{\"content\":\"pragma solidity ^0.8.15;\\n\\ninterface IBVToken {\\n    function giveReward(address rewardAddress, uint256 reward) external;\\n}\\n\",\"keccak256\":\"0x8ae71fa86f79789746ff46a4d041d7a5169ab8a1b0e4f75a04be5f7f85ff5463\"},\"src/interface/IView.sol\":{\"content\":\"pragma solidity ^0.8.15;\\n\\nimport \\\"./IAttendance.sol\\\";\\nimport \\\"./IVote.sol\\\";\\n\\ninterface IView {\\n    struct VoteStatus {\\n        address voteAddr;\\n        IVote.State state;\\n        uint256 totalAudience;\\n        uint256 approvedAudience;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 rewardPresenter;\\n        uint256 rewardAudience;\\n        address[] memberList;\\n        address presenter;\\n    }\\n\\n    function getVoteAddress(uint256 date) external returns (address voteContractAddress);\\n\\n    function getAttendanceAddress() external returns (address);\\n\\n    function getBVTokenAddress() external returns (address);\\n\\n    function getVoteFactoryAddress() external returns (address);\\n\\n    function setAttendanceAddress(address attendanceAddress) external;\\n\\n    function setBVTokenAddress(address bvTokenAddress) external;\\n\\n    function setVoteFactoryAddress(address voteFactoryAddress) external;\\n}\\n\",\"keccak256\":\"0xe7df13abd03cdf55ac461e0069a28accd0a0fc17be5f0aaee612a7cae960888e\"},\"src/interface/IVote.sol\":{\"content\":\"pragma solidity ^0.8.15;\\n\\ninterface IVote {\\n    enum State {\\n        Ongoing,\\n        Approved,\\n        Rejected\\n    }\\n\\n    struct VoteState {\\n        State _state;\\n        uint256 _totalAudience;\\n        uint256 _approvedAudience;\\n        uint256 _startTime;\\n        uint256 _endTime;\\n        uint256 _rewardPresenter;\\n        uint256 _rewardAudience;\\n        address[] _memberList;\\n        address _presenter;\\n    }\\n\\n    // event VoteStart(uint256 _timestamp);\\n\\n    // event VoteResult(uint256 _timestamp, uint256 _totalAudience, uint256 _approvedAudience, State _result);\\n\\n    function initialize(\\n        address viewAddr,\\n        uint256 totalAudience,\\n        uint256 rewardPresenter,\\n        uint256 rewardAudience,\\n        address[] memory memberList,\\n        address presenter\\n    ) external;\\n\\n    function getVote() external returns (VoteState memory);\\n\\n    function voteAudience() external;\\n}\\n\",\"keccak256\":\"0x1ad1a022d9ebcde3cfe4a6764ea9b3ccaa1d3005efaf181381d69cbccab06663\"},\"src/interface/IVoteFactory.sol\":{\"content\":\"pragma solidity ^0.8.15;\\n\\ninterface IVoteFactory {\\n    function isVote(address vote) external returns (bool);\\n\\n    function allVotes(uint256 index) external returns (address);\\n\\n    function allVotesLength() external returns (uint256);\\n\\n    function createVote(\\n        uint256 totalAudience,\\n        uint256 rewardPresenter,\\n        uint256 rewardAudience,\\n        address[] memory memberList,\\n        address presenter,\\n        uint256 date\\n    ) external;\\n\\n    function getVoteAddress(uint256 date) external returns (address voteAddress);\\n}\\n\",\"keccak256\":\"0x36ea27f1e1e82194934bbc611d7d005adad804cdd5f82b6b83b0670fbac958a6\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637028c0461161008c578063b6da2f8211610066578063b6da2f82146101a9578063c4680f1d146101bc578063ca65bd89146101cf578063f2fde38b146101e057600080fd5b80637028c0461461017d578063715018a6146101905780638da5cb5b1461019857600080fd5b8063067834c5146100d457806310b8096b146100fd578063164829ef1461011d57806324599417146101325780633eb905ae146101575780634ba611e614610168575b600080fd5b6100e76100e23660046109cc565b6101f3565b6040516100f49190610b07565b60405180910390f35b61011061010b366004610b1a565b61030f565b6040516100f49190610b76565b61013061012b3660046109cc565b610390565b005b6003546001600160a01b03165b6040516001600160a01b0390911681526020016100f4565b6001546001600160a01b031661013f565b6101706103ba565b6040516100f49190610ba9565b61013061018b3660046109cc565b610754565b61013061077e565b6000546001600160a01b031661013f565b6101306101b73660046109cc565b610792565b61013f6101ca366004610c0b565b6107bc565b6002546001600160a01b031661013f565b6101306101ee3660046109cc565b610832565b6101fb61095a565b6000826001600160a01b0316630242f3516040518163ffffffff1660e01b81526004016000604051808303816000875af115801561023d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102659190810190610d3d565b6001600160a01b038416835280519091506020830190600281111561028c5761028c6109e9565b9081600281111561029f5761029f6109e9565b905250602081015160408084019190915281015160608084019190915281015160808084019190915281015160a08084019190915281015160c08084019190915281015160e0808401919091528101516101008084019190915201516001600160a01b0316610120820152919050565b60015460405163207aeadd60e11b81526001600160a01b0384811660048301526024820184905260609216906340f5d5ba90604401600060405180830381865afa158015610361573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103899190810190610e0e565b9392505050565b6103986108b0565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b60606000600360009054906101000a90046001600160a01b03166001600160a01b0316634096b14b6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610413573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104379190610ea2565b90508067ffffffffffffffff81111561045257610452610c24565b60405190808252806020026020018201604052801561048b57816020015b61047861095a565b8152602001906001900390816104705790505b50915060005b8181101561074f57600354604051636f31fa1960e11b8152600481018390526000916001600160a01b03169063de63f432906024016020604051808303816000875af11580156104e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105099190610ebb565b90506000816001600160a01b0316630242f3516040518163ffffffff1660e01b81526004016000604051808303816000875af115801561054d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105759190810190610d3d565b90508185848151811061058a5761058a610ed8565b60209081029190910101516001600160a01b039091169052805185518690859081106105b8576105b8610ed8565b60200260200101516020019060028111156105d5576105d56109e9565b908160028111156105e8576105e86109e9565b81525050806020015185848151811061060357610603610ed8565b60200260200101516040018181525050806040015185848151811061062a5761062a610ed8565b60200260200101516060018181525050806060015185848151811061065157610651610ed8565b60200260200101516080018181525050806080015185848151811061067857610678610ed8565b602002602001015160a00181815250508060a0015185848151811061069f5761069f610ed8565b602002602001015160c00181815250508060c001518584815181106106c6576106c6610ed8565b602002602001015160e00181815250508060e001518584815181106106ed576106ed610ed8565b6020026020010151610100018190525080610100015185848151811061071557610715610ed8565b602002602001015161012001906001600160a01b031690816001600160a01b0316815250505050808061074790610eee565b915050610491565b505090565b61075c6108b0565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6107866108b0565b610790600061090a565b565b61079a6108b0565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60035460405163c4680f1d60e01b8152600481018390526000916001600160a01b03169063c4680f1d906024016020604051808303816000875af1158015610808573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082c9190610ebb565b92915050565b61083a6108b0565b6001600160a01b0381166108a45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6108ad8161090a565b50565b6000546001600160a01b031633146107905760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161089b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040805161014081019091526000808252602082019081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016060815260200160006001600160a01b031681525090565b6001600160a01b03811681146108ad57600080fd5b6000602082840312156109de57600080fd5b8135610389816109b7565b634e487b7160e01b600052602160045260246000fd5b60038110610a1d57634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526020808501945080840160005b83811015610a5a5781516001600160a01b031687529582019590820190600101610a35565b509495945050505050565b80516001600160a01b0316825260006101406020830151610a8960208601826109ff565b5060408301516040850152606083015160608501526080830151608085015260a083015160a085015260c083015160c085015260e083015160e0850152610100808401518282870152610ade83870182610a21565b9250505061012080840151610afd828701826001600160a01b03169052565b5090949350505050565b6020815260006103896020830184610a65565b60008060408385031215610b2d57600080fd5b8235610b38816109b7565b946020939093013593505050565b60005b83811015610b61578181015183820152602001610b49565b83811115610b70576000848401525b50505050565b6020815260008251806020840152610b95816040850160208701610b46565b601f01601f19169190910160400192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610bfe57603f19888603018452610bec858351610a65565b94509285019290850190600101610bd0565b5092979650505050505050565b600060208284031215610c1d57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051610120810167ffffffffffffffff81118282101715610c5e57610c5e610c24565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610c8d57610c8d610c24565b604052919050565b805160038110610ca457600080fd5b919050565b8051610ca4816109b7565b600082601f830112610cc557600080fd5b8151602067ffffffffffffffff821115610ce157610ce1610c24565b8160051b610cf0828201610c64565b9283528481018201928281019087851115610d0a57600080fd5b83870192505b84831015610d32578251610d23816109b7565b82529183019190830190610d10565b979650505050505050565b600060208284031215610d4f57600080fd5b815167ffffffffffffffff80821115610d6757600080fd5b908301906101208286031215610d7c57600080fd5b610d84610c3a565b610d8d83610c95565b81526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015182811115610ddd57600080fd5b610de987828601610cb4565b60e0830152506101009150610dff828401610ca9565b91810191909152949350505050565b600060208284031215610e2057600080fd5b815167ffffffffffffffff80821115610e3857600080fd5b818401915084601f830112610e4c57600080fd5b815181811115610e5e57610e5e610c24565b610e71601f8201601f1916602001610c64565b9150808252856020828501011115610e8857600080fd5b610e99816020840160208601610b46565b50949350505050565b600060208284031215610eb457600080fd5b5051919050565b600060208284031215610ecd57600080fd5b8151610389816109b7565b634e487b7160e01b600052603260045260246000fd5b600060018201610f0e57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220309f4d19034e239bd8c1becc7f97783c79726eb844dd02a986ed0d894f845ad964736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4754,
        "contract": "src/View.sol:View",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3256,
        "contract": "src/View.sol:View",
        "label": "_attendanceAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3258,
        "contract": "src/View.sol:View",
        "label": "_bvTokenAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3260,
        "contract": "src/View.sol:View",
        "label": "_voteFactoryAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}