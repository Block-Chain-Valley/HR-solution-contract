{
  "address": "0x0CF6D3D3FEC650Cf8dABC925f8307ACC997a425C",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getAttendanceAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBVTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        }
      ],
      "name": "getVoteAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "voteContractAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVoteFactoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "attendanceAddress",
          "type": "address"
        }
      ],
      "name": "setAttendanceAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bvTokenAddress",
          "type": "address"
        }
      ],
      "name": "setBVTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voteFactoryAddress",
          "type": "address"
        }
      ],
      "name": "setVoteFactoryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x191c2723b4cb2fabbcc9b50a2cc5bc8e8a1075621493f2699cf406be7c93a15d",
  "receipt": {
    "to": null,
    "from": "0x3338f7c7a0ABAC5C20e8d2ACa03E8C25fe31304F",
    "contractAddress": "0x0CF6D3D3FEC650Cf8dABC925f8307ACC997a425C",
    "transactionIndex": 41,
    "gasUsed": "312786",
    "logsBloom": "0x
    "blockHash": "0xa09d02d8618f385f2eb66709d5309ad9fba39a75792aae6aa1f67f04c0622cd1",
    "transactionHash": "0x191c2723b4cb2fabbcc9b50a2cc5bc8e8a1075621493f2699cf406be7c93a15d",
    "logs": [
      {
        "transactionIndex": 41,
        "blockNumber": 7756893,
        "transactionHash": "0x191c2723b4cb2fabbcc9b50a2cc5bc8e8a1075621493f2699cf406be7c93a15d",
        "address": "0x0CF6D3D3FEC650Cf8dABC925f8307ACC997a425C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003338f7c7a0abac5c20e8d2aca03e8c25fe31304f"
        ],
        "data": "0x",
        "logIndex": 132,
        "blockHash": "0xa09d02d8618f385f2eb66709d5309ad9fba39a75792aae6aa1f67f04c0622cd1"
      }
    ],
    "blockNumber": 7756893,
    "cumulativeGasUsed": "14312230",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f07a694acb2b06fc46811e1d693c3834",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getAttendanceAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBVTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"getVoteAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"voteContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVoteFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attendanceAddress\",\"type\":\"address\"}],\"name\":\"setAttendanceAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bvTokenAddress\",\"type\":\"address\"}],\"name\":\"setBVTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voteFactoryAddress\",\"type\":\"address\"}],\"name\":\"setVoteFactoryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/View.sol\":\"View\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/View.sol\":{\"content\":\"pragma solidity ^0.8.15;\\n\\nimport \\\"./interface/IView.sol\\\";\\nimport \\\"./interface/IAttendance.sol\\\";\\nimport \\\"./interface/IBVToken.sol\\\";\\nimport \\\"./interface/IVoteFactory.sol\\\";\\nimport \\\"./common/Ownable.sol\\\";\\n\\ncontract View is Ownable, IView {\\n    address private _attendanceAddress;\\n    address private _bvTokenAddress;\\n    address private _voteFactoryAddress;\\n\\n    function getVoteAddress(uint256 date) public returns (address voteContractAddress) {\\n        return IVoteFactory(_voteFactoryAddress).getVoteAddress(date);\\n    }\\n\\n    function getAttendanceAddress() public returns (address) {\\n        return _attendanceAddress;\\n    }\\n\\n    function getBVTokenAddress() public returns (address) {\\n        return _bvTokenAddress;\\n    }\\n\\n    function getVoteFactoryAddress() public returns (address) {\\n        return _voteFactoryAddress;\\n    }\\n\\n    function setAttendanceAddress(address attendanceAddress) public onlyOwner {\\n        _attendanceAddress = attendanceAddress;\\n    }\\n\\n    function setBVTokenAddress(address bvTokenAddress) public onlyOwner {\\n        _bvTokenAddress = bvTokenAddress;\\n    }\\n\\n    function setVoteFactoryAddress(address voteFactoryAddress) public onlyOwner {\\n        _voteFactoryAddress = voteFactoryAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x3a5c0008d5a15664a76dcfd37bf2962e9133720f1f4c48357f05753841c7400f\"},\"src/common/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/common/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x0bfcd2b00e05cfb5ca3783eea8f5098bbb015fefba6c4fc8f044743f035b74fe\",\"license\":\"MIT\"},\"src/interface/IAttendance.sol\":{\"content\":\"pragma solidity ^0.8.15;\\n\\ninterface IAttendance {\\n    function getAttendance(address member, uint256 date) external view returns (string memory attendance);\\n\\n    function setAttendance(\\n        address member,\\n        string memory state,\\n        uint256 date\\n    ) external;\\n}\\n\",\"keccak256\":\"0x528c7f68b23a5684c82841a31a7b39b6116697722c25618a8ea629d00d09ad0d\"},\"src/interface/IBVToken.sol\":{\"content\":\"pragma solidity ^0.8.15;\\n\\ninterface IBVToken {\\n    function giveReward(address rewardAddress, uint256 reward) external;\\n}\\n\",\"keccak256\":\"0x8ae71fa86f79789746ff46a4d041d7a5169ab8a1b0e4f75a04be5f7f85ff5463\"},\"src/interface/IView.sol\":{\"content\":\"pragma solidity ^0.8.15;\\n\\nimport \\\"./IAttendance.sol\\\";\\n\\ninterface IView {\\n    function getVoteAddress(uint256 date) external returns (address voteContractAddress);\\n\\n    function getAttendanceAddress() external returns (address);\\n\\n    function getBVTokenAddress() external returns (address);\\n\\n    function getVoteFactoryAddress() external returns (address);\\n\\n    function setAttendanceAddress(address attendanceAddress) external;\\n\\n    function setBVTokenAddress(address bvTokenAddress) external;\\n\\n    function setVoteFactoryAddress(address voteFactoryAddress) external;\\n}\\n\",\"keccak256\":\"0x8a7c9e5f94cac8c60679fac586d1022baa4ec780703e06c3731cbad350466bd2\"},\"src/interface/IVoteFactory.sol\":{\"content\":\"pragma solidity ^0.8.15;\\n\\ninterface IVoteFactory {\\n    function isVote(address vote) external returns (bool);\\n\\n    function createVote(\\n        uint256 totalAudience,\\n        uint256 rewardPresenter,\\n        uint256 rewardAudience,\\n        address[] memory memberList,\\n        address presenter,\\n        uint256 date\\n    ) external;\\n\\n    function getVoteAddress(uint256 date) external returns (address voteAddress);\\n}\\n\",\"keccak256\":\"0xb2de68380090966c0ac9c6abd9b8adc17d7cb3c03c7204586f3a69b236087d4c\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61043d8061007e6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638da5cb5b116100665780638da5cb5b1461010d578063b6da2f821461011e578063c4680f1d14610131578063ca65bd8914610144578063f2fde38b1461015557600080fd5b8063164829ef146100a357806324599417146100b85780633eb905ae146100e15780637028c046146100f2578063715018a614610105575b600080fd5b6100b66100b13660046103ad565b610168565b005b6003546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b6001546001600160a01b03166100c5565b6100b66101003660046103ad565b610192565b6100b66101bc565b6000546001600160a01b03166100c5565b6100b661012c3660046103ad565b6101d0565b6100c561013f3660046103d1565b6101fa565b6002546001600160a01b03166100c5565b6100b66101633660046103ad565b610270565b6101706102ee565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b61019a6102ee565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6101c46102ee565b6101ce6000610348565b565b6101d86102ee565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60035460405163c4680f1d60e01b8152600481018390526000916001600160a01b03169063c4680f1d906024016020604051808303816000875af1158015610246573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026a91906103ea565b92915050565b6102786102ee565b6001600160a01b0381166102e25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6102eb81610348565b50565b6000546001600160a01b031633146101ce5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102d9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146102eb57600080fd5b6000602082840312156103bf57600080fd5b81356103ca81610398565b9392505050565b6000602082840312156103e357600080fd5b5035919050565b6000602082840312156103fc57600080fd5b81516103ca8161039856fea264697066735822122089b196757d46c46dcbb9648f045fbb0845c4e3c1f1f1b4b3726105220ae87eff64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80638da5cb5b116100665780638da5cb5b1461010d578063b6da2f821461011e578063c4680f1d14610131578063ca65bd8914610144578063f2fde38b1461015557600080fd5b8063164829ef146100a357806324599417146100b85780633eb905ae146100e15780637028c046146100f2578063715018a614610105575b600080fd5b6100b66100b13660046103ad565b610168565b005b6003546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b6001546001600160a01b03166100c5565b6100b66101003660046103ad565b610192565b6100b66101bc565b6000546001600160a01b03166100c5565b6100b661012c3660046103ad565b6101d0565b6100c561013f3660046103d1565b6101fa565b6002546001600160a01b03166100c5565b6100b66101633660046103ad565b610270565b6101706102ee565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b61019a6102ee565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6101c46102ee565b6101ce6000610348565b565b6101d86102ee565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60035460405163c4680f1d60e01b8152600481018390526000916001600160a01b03169063c4680f1d906024016020604051808303816000875af1158015610246573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026a91906103ea565b92915050565b6102786102ee565b6001600160a01b0381166102e25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6102eb81610348565b50565b6000546001600160a01b031633146101ce5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102d9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146102eb57600080fd5b6000602082840312156103bf57600080fd5b81356103ca81610398565b9392505050565b6000602082840312156103e357600080fd5b5035919050565b6000602082840312156103fc57600080fd5b81516103ca8161039856fea264697066735822122089b196757d46c46dcbb9648f045fbb0845c4e3c1f1f1b4b3726105220ae87eff64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4464,
        "contract": "src/View.sol:View",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3240,
        "contract": "src/View.sol:View",
        "label": "_attendanceAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3242,
        "contract": "src/View.sol:View",
        "label": "_bvTokenAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3244,
        "contract": "src/View.sol:View",
        "label": "_voteFactoryAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}