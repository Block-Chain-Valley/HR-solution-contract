{
  "language": "Solidity",
  "sources": {
    "src/Attendance.sol": {
      "content": "pragma solidity ^0.8.15;\n\nimport \"./interface/IAttendance.sol\";\n\ncontract Attendance is IAttendance {\n    // mapping(address => mapping(uint256 => AttendanceState)) public attendanceStatus;\n    // function getAttendance(address member, uint256 date) public view returns (AttendanceState) {\n    //     return attendanceStatus[member][date];\n    // }\n    // function setAttendance(\n    //     address member,\n    //     string state,\n    //     uint256 date\n    // ) public returns () {\n    //     require(attendanceStatus[member][date] == 0, \"State is already written.\");\n    //     attendanceStatus[member][date] = AttendanceState(state);\n    // }\n}\n"
    },
    "src/interface/IAttendance.sol": {
      "content": "pragma solidity ^0.8.15;\n\ninterface IAttendance {\n    // enum AttendanceState {\n    //     Absent,\n    //     Late,\n    //     Attend\n    // }\n    // function getAttendance(address member, uint256 date) public view returns (attendanceState);\n    // function setAttendance(\n    //     address member,\n    //     string state,\n    //     uint256 date\n    // ) external;\n}\n"
    },
    "src/interface/IView.sol": {
      "content": "pragma solidity ^0.8.15;\n\nimport \"./IAttendance.sol\";\n\ninterface IView {\n    // function getAttendance(address member, uint256 date) external returns (AttendanceState);\n\n    function getVoteAddress(uint256 date) external returns (address voteContractAddress);\n\n    // function getAttendanceAddress() external returns (address);\n\n    // function getBVTokenAddress() external returns (address);\n\n    function getVoteFactoryAddress() external returns (address);\n\n    // function setAttendanceAddress(address attendanceAddress) external;\n\n    // function setBVTokenAddress(address bvTokenAddress) external;\n\n    function setVoteFactoryAddress(address voteFactoryAddress) external;\n}\n"
    },
    "src/Vote.sol": {
      "content": "pragma solidity ^0.8.15;\n\nimport \"./interface/IVote.sol\";\nimport \"./interface/IView.sol\";\n\n// import \"./interface/IBVToken.sol\";\n\ncontract Vote is IVote {\n    VoteState vote;\n    bool isInitialized = false;\n    event Success(bool result);\n    address viewAddr;\n\n    function initialize(\n        address viewAddr_,\n        uint256 totalAudience,\n        uint256 rewardPresenter,\n        uint256 rewardAudience,\n        address[] memory memberList,\n        address presenter\n    ) external {\n        require(isInitialized == false, \"Can be Initialized only once\");\n        VoteState memory voteLocal;\n\n        viewAddr = viewAddr_;\n        voteLocal._state = State.Ongoing;\n        voteLocal._totalAudience = totalAudience;\n        voteLocal._rewardPresenter = rewardPresenter;\n        voteLocal._rewardAudience = rewardAudience;\n        voteLocal._memberList = memberList;\n        voteLocal._presenter = presenter;\n        voteLocal._startTime = block.timestamp;\n        // TODO: 테스팅 시 시간 확인 필요\n        voteLocal._endTime = block.timestamp + 10800;\n\n        vote = voteLocal;\n        isInitialized = true;\n    }\n\n    function voteAudience() external {\n        VoteState memory voteLocal = vote;\n        uint256 memberListLength = voteLocal._memberList.length;\n        bool isInMemberList = false;\n\n        for (uint256 i = 0; i < memberListLength; i += 1) {\n            if (voteLocal._memberList[i] == msg.sender) {\n                isInMemberList = true;\n                break;\n            }\n        }\n\n        if (isInMemberList == false) {\n            emit Success(false);\n            revert(\"msg.sender must be audience\");\n        }\n\n        if (block.timestamp >= voteLocal._endTime) {\n            if (voteLocal._approvedAudience < (voteLocal._totalAudience * 2) / 3) {\n                voteLocal._state = State.Rejected;\n            }\n        } else {\n            voteLocal._approvedAudience = voteLocal._approvedAudience + 1;\n            emit Success(true);\n\n            // address bvTokenAddr = IView(viewAddr).getBVTokenAddress();\n            // IBVToken(bvTokenAddr).giveReward(msg.sender, voteLocal._rewardAudience);\n            if (voteLocal._approvedAudience >= (voteLocal._totalAudience * 2) / 3) {\n                // IBVToken(bvTokenAddr).giveReward(voteLocal._presenter, voteLocal._rewardPresenter);\n                voteLocal._state = State.Approved;\n            } else if (voteLocal._approvedAudience < (voteLocal._totalAudience * 2) / 3) {\n                voteLocal._state = State.Ongoing;\n            }\n        }\n\n        vote = voteLocal;\n    }\n}\n"
    },
    "src/interface/IVote.sol": {
      "content": "pragma solidity ^0.8.15;\n\ninterface IVote {\n    enum State {\n        Ongoing,\n        Approved,\n        Rejected\n    }\n\n    struct VoteState {\n        State _state;\n        uint256 _totalAudience;\n        uint256 _approvedAudience;\n        uint256 _startTime;\n        uint256 _endTime;\n        uint256 _rewardPresenter;\n        uint256 _rewardAudience;\n        address[] _memberList;\n        address _presenter;\n    }\n\n    // event VoteStart(uint256 _timestamp);\n\n    // event VoteResult(uint256 _timestamp, uint256 _totalAudience, uint256 _approvedAudience, State _result);\n\n    function initialize(\n        address viewAddr,\n        uint256 totalAudience,\n        uint256 rewardPresenter,\n        uint256 rewardAudience,\n        address[] memory memberList,\n        address presenter\n    ) external;\n\n    function voteAudience() external;\n}\n"
    },
    "src/VoteFactory.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.15;\n\nimport \"./interface/IVoteFactory.sol\";\nimport \"./Vote.sol\";\n\ncontract VoteFactory is IVoteFactory {\n    address viewAddr;\n    // 투표 index -> 투표 컨트랙트 주소\n    mapping(uint256 => address) public getVote;\n    // 투표 컨트랙트 주소 => 컨트랙 존재 유무 //\n    mapping(address => bool) public isVote;\n    address public admin;\n\n    // event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\n\n    constructor(address viewAddr_) {\n        admin = msg.sender;\n        viewAddr = viewAddr_;\n    }\n\n    modifier onlyAdmin() {\n        require(admin == msg.sender, \"ACCESS_DENIED\");\n        _;\n    }\n\n    function setAdmin() private onlyAdmin {\n        admin = msg.sender;\n    }\n\n    function setViewAddr(address newViewAddr) external onlyAdmin {\n        viewAddr = newViewAddr;\n    }\n\n    function createVote(\n        uint256 totalAudience,\n        uint256 rewardPresenter,\n        uint256 rewardAudience,\n        address[] memory memberList,\n        address presenter,\n        uint256 date\n    ) external {\n        address voteAddr;\n        bytes memory bytecode = type(Vote).creationCode;\n        bytes32 salt = keccak256(abi.encodePacked(date));\n        assembly {\n            voteAddr := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n\n        IVote(voteAddr).initialize(viewAddr, totalAudience, rewardPresenter, rewardAudience, memberList, presenter);\n\n        getVote[date] = voteAddr;\n        isVote[voteAddr] = true;\n\n        // emit VoteCreated();\n    }\n\n    function getVoteAddress(uint256 date) external returns (address) {\n        return getVote[date];\n    }\n}\n"
    },
    "src/interface/IVoteFactory.sol": {
      "content": "pragma solidity ^0.8.15;\n\ninterface IVoteFactory {\n    function createVote(\n        uint256 totalAudience,\n        uint256 rewardPresenter,\n        uint256 rewardAudience,\n        address[] memory memberList,\n        address presenter,\n        uint256 date\n    ) external;\n\n    function getVoteAddress(uint256 date) external returns (address voteAddress);\n}\n"
    },
    "src/View.sol": {
      "content": "pragma solidity ^0.8.15;\n\nimport \"./interface/IView.sol\";\n// import \"./interface/IAttendance.sol\";\n// import \"./interface/IBVToken.sol\";\nimport \"./interface/IVoteFactory.sol\";\nimport \"./common/Ownable.sol\";\n\ncontract View is Ownable, IView {\n    // address private _attendanceAddress;\n    // address private _bvTokenAddress;\n    address private _voteFactoryAddress;\n\n    // function getAttendance(address member, uint256 date) public returns (AttendanceState) {\n    //     return IAttendance(attendanceAddress).getAttendance(member, date);\n    // }\n\n    function getVoteAddress(uint256 date) public returns (address voteContractAddress) {\n        return IVoteFactory(_voteFactoryAddress).getVoteAddress(date);\n    }\n\n    // function getAttendanceAddress() public returns (address) {\n    //     return _attendanceAddress;\n    // }\n\n    // function getBVTokenAddress() public returns (address) {\n    //     return _bvTokenAddress;\n    // }\n\n    function getVoteFactoryAddress() public returns (address) {\n        return _voteFactoryAddress;\n    }\n\n    // function setAttendanceAddress(address attendanceAddress) public onlyOwner {\n    //     _attendanceAddress = attendanceAddress;\n    // }\n\n    // function setBVTokenAddress(address bvTokenAddress) public onlyOwner {\n    //     _bvTokenAddress = bvTokenAddress;\n    // }\n\n    function setVoteFactoryAddress(address voteFactoryAddress) public onlyOwner {\n        _voteFactoryAddress = voteFactoryAddress;\n    }\n}\n"
    },
    "src/common/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.15;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "src/common/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "src/common/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./IERC20Metadata.sol\";\nimport \"./Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "src/common/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "src/common/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}